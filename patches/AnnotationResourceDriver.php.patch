diff --git "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Ann9B3.tmp\\AnnotationResourceDriver-HEAD-left.php" "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\Bean\\Factory\\Driver\\AnnotationResourceDriver.php"
index 1ad1170..ce9d459 100644
--- "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Ann9B3.tmp\\AnnotationResourceDriver-HEAD-left.php"
+++ "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\Bean\\Factory\\Driver\\AnnotationResourceDriver.php"
@@ -38,6 +38,7 @@ use Ding\Bean\BeanDefinition;
 use Ding\Bean\BeanAnnotationDefinition;
 use Ding\Bean\Factory\IBeanFactory;
 use Ding\Reflection\ReflectionFactory;
+use Ding\Bean\BeanConstructorArgumentDefinition;
 
 /**
  * This driver will search for @Resource setter methods.
@@ -60,7 +61,19 @@ class AnnotationResourceDriver implements IAfterDefinitionListener, IAfterCreate
             $rClass = ReflectionFactory::getClass($class);
             foreach ($beanDefinition->getAutowiredProperties() as $property) {
                 $name = $property->getName();
-                $value = $factory->getBean($name);
+                $beanDefinition = $factory->getBeanDefinition($name);
+                $previousArgs = $beanDefinition->getArguments();
+                try
+                {
+                    $beanDefinition->setArguments($property->getValue());
+                    $value = $factory->getBean($name);
+                    $beanDefinition->setArguments($previousArgs);
+                }
+                catch (\Exception $ex)
+                {
+                    $beanDefinition->setArguments($previousArgs);
+                    throw $ex;
+                }
                 $rProperty = $rClass->getProperty($name);
                 if (!$rProperty->isPublic()) {
                     $rProperty->setAccessible(true);
@@ -96,8 +109,9 @@ class AnnotationResourceDriver implements IAfterDefinitionListener, IAfterCreate
             $propName = lcfirst(substr($method, 3));
             foreach ($methodAnnotations as $annotation) {
                 if ($annotation->getName() == 'Resource') {
+                    $arguments = $this->_parseArguments($annotation);
                     $properties[$propName] = new BeanPropertyDefinition(
-                        $propName, BeanPropertyDefinition::PROPERTY_BEAN, $propName
+                        $propName, BeanPropertyDefinition::PROPERTY_BEAN, $arguments
                     );
                 }
             }
@@ -107,8 +121,9 @@ class AnnotationResourceDriver implements IAfterDefinitionListener, IAfterCreate
         foreach ($annotations['class']['properties'] as $property => $propertyAnnotations) {
             foreach ($propertyAnnotations as $annotation) {
                 if ($annotation->getName() == 'Resource') {
+                    $arguments = $this->_parseArguments($annotation);
                     $properties[$property] = new BeanPropertyDefinition(
-                        $property, BeanPropertyDefinition::PROPERTY_BEAN, $property
+                        $property, BeanPropertyDefinition::PROPERTY_BEAN, $arguments
                     );
                 }
             }
@@ -116,6 +131,24 @@ class AnnotationResourceDriver implements IAfterDefinitionListener, IAfterCreate
         $bean->setAutowiredProperties($properties);
         return $bean;
     }
+    
+    /**
+     * Parses annotation arguments and return an array of BeanConstructorArgumentDefinition.
+     *
+     * @param BeanAnnotationDefinition $annotation 
+     * @return BeanConstructorArgumentDefinition[]
+     */
+    private function _parseArguments(BeanAnnotationDefinition $annotation)
+    {
+        $result = array();
+        foreach ($annotation->getArguments() as $argument)
+        {
+            if ($argument == $annotation->getName()) 
+                continue;
+            $result[] = new BeanConstructorArgumentDefinition(BeanConstructorArgumentDefinition::BEAN_CONSTRUCTOR_VALUE, $argument);
+        }
+        return $result;
+    }
 
     /**
      * Constructor.
