diff --git "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Dis75C0.tmp\\Dispatcher-HEAD-left.php" "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\MVC\\Dispatcher.php"
index 0ada4c0..6aa0170 100644
--- "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Dis75C0.tmp\\Dispatcher-HEAD-left.php"
+++ "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\MVC\\Dispatcher.php"
@@ -86,9 +86,33 @@ abstract class Dispatcher
             );
         }
         if (!method_exists($controller, $actionHandler)) {
-            throw new MVCException('No valid action handler found: ' . $actionHandler);
+            throw new MVCException('No valid action handler found: ' . $actionHandler . ', in the controller: ' . get_class($controller));
         }
-        return $controller->$actionHandler($action->getArguments());
+        $arguments = $action->getArguments();
+        if (empty($arguments)) {
+            return $controller->$actionHandler();
+        }
+        return $this->parameterizedCall($controller, $actionHandler, $arguments);
+    }
+    
+    /**
+     * Calls the specified method from the specifed object using the specified arguments map.
+     * @param object $object
+     * @param string $method Method name
+     * @param array $arguments Map of arguments, where key is argument name, and value is argument value.
+     * @return mxied 
+     */
+    private function parameterizedCall($object, $method, array $arguments) {
+        $methodInfo = new \ReflectionMethod(get_class($object), $method);
+        $parameters = $methodInfo->getParameters();
+        $values = array();
+        foreach ($parameters as $parameter) {
+            /* @var $parameter \ReflectionParameter */
+            $value = array_key_exists($parameter->name, $arguments) ? $arguments[$parameter->name] : $parameter->getDefaultValue();
+            $values[intval($parameter->getPosition())] = $value;
+        }
+
+        return $methodInfo->invokeArgs($object, $values);
     }
 
     /**
