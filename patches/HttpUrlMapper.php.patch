diff --git "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Htt99B7.tmp\\HttpUrlMapper-HEAD-left.php" "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\MVC\\Http\\HttpUrlMapper.php"
index 2ce2682..a725702 100644
--- "a/C:\\Users\\V1DF1~1.DUB\\AppData\\Local\\Temp\\Htt99B7.tmp\\HttpUrlMapper-HEAD-left.php"
+++ "b/D:\\projects\\MetaPlayer\\meta-player\\library\\Ding\\src\\mg\\Ding\\MVC\\Http\\HttpUrlMapper.php"
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * A mapper implementation for http requests.
  *
@@ -27,10 +28,10 @@
  * limitations under the License.
  *
  */
+
 namespace Ding\MVC\Http;
 
 use Ding\Container\Impl\ContainerImpl;
-
 use Ding\MVC\Exception\MVCException;
 use Ding\MVC\IMapper;
 use Ding\MVC\Action;
@@ -48,8 +49,8 @@ use Ding\MVC\Action;
  * @version    SVN: $Id$
  * @link       http://marcelog.github.com/
  */
-class HttpUrlMapper implements IMapper
-{
+class HttpUrlMapper implements IMapper {
+
     /**
      * Cache for isDebugEnabled()
      * @var boolean
@@ -74,6 +75,18 @@ class HttpUrlMapper implements IMapper
     private static $_annotatedControllers = array();
 
     /**
+     * The default controller name. Uses if request contains only '/' .
+     * @var string
+     */
+    private static $_defaultController = "index";
+
+    /**
+     * The default action name. Used if requesst does not contain action and parameters.
+     * @var string
+     */
+    private static $_defaultAction = "index";
+
+    /**
      * Used from the MVC driver to add controllers found by annotations.
      *
      * @param string $url        Url mapped.
@@ -81,8 +94,7 @@ class HttpUrlMapper implements IMapper
      *
      * @return void
      */
-    public static function addAnnotatedController($url, $controller)
-    {
+    public static function addAnnotatedController($url, $controller) {
         self::$_annotatedControllers[] = array($url, $controller);
     }
 
@@ -97,8 +109,7 @@ class HttpUrlMapper implements IMapper
      *
      * @return void
      */
-    public function setMap(array $map)
-    {
+    public function setMap(array $map) {
         $this->_map = $map;
     }
 
@@ -112,8 +123,7 @@ class HttpUrlMapper implements IMapper
      * @return array [0] => Controller [1] => Method to call (With
      * 'Action' appended to the end of the method name).
      */
-    public function map(Action $action)
-    {
+    public function map(Action $action) {
         $url = $action->getId();
         // Add a slash to the beginning is none is found after removing the
         // base url.
@@ -124,48 +134,52 @@ class HttpUrlMapper implements IMapper
         $url = explode('?', $url);
         $url = $url[0];
 
-        // Add a trailing slash to the result.
-        $len = strlen($url) - 1;
-        if ($url[$len] != '/') {
-            $url .= '/';
-        }
+        // parce url to controller, action and parameters
+        $parts = explode('/', $url);
+        array_shift($parts);
+        $requestController = isset($parts[0]) && !empty($parts[0]) ? array_shift($parts) : self::$_defaultController;
+        $requestController = "/$requestController/";
+
+        $requestAction = isset($parts[0]) && !empty($parts[0]) ? array_shift($parts) : self::$_defaultAction;
+
+        $params = $parts; // TODO: parse paramters like /controller/action/id/123/...
 
         if ($this->_loggerDebugEnabled) {
-            $this->_logger->debug('Trying to match: ' . $url);
+            $this->_logger->debug('Trying to match: ' . $requestController . $requestAction);
         }
         // Lookup a controller that can handle this url.
         $try = array_merge($this->_map, self::$_annotatedControllers);
         foreach ($try as $map) {
-            $controllerUrl = $map[0];
             $controller = $map[1];
-            if ($controllerUrl[0] != '/') {
-                $controllerUrl = '/' . $controllerUrl;
-            }
-            $len = strlen($controllerUrl);
-            if ($controllerUrl[$len - 1] != '/') {
-                $controllerUrl = $controllerUrl . '/';
+            $urls = $map[0];
+            if (!is_array($urls)) {
+                $urls = array($urls);
             }
-            $controllerUrlStart = strpos($url, $controllerUrl);
-            if ($controllerUrlStart === false || $controllerUrlStart > 0) {
-                continue;
-            }
-            $start = $controllerUrlStart + strlen($controllerUrl);
-            $action = substr($url, $start);
-            if ($action === false) {
-                $action = 'Main';
-            }
-            $action = explode('/', $action);
-            $action = $action[0];
-            if (!is_object($controller)) {
-                if ($this->_loggerDebugEnabled) {
-                    $this->_logger->debug(
-                    	'Found as annotated controller: ' . $controller
-                    );
+            // Val D.: there are many url per one controller
+            foreach ($urls as $controllerUrl) {
+                if ($controllerUrl[0] != '/') {
+                    $controllerUrl = '/' . $controllerUrl;
+                }
+                $len = strlen($controllerUrl);
+                if ($controllerUrl[$len - 1] != '/') {
+                    $controllerUrl = $controllerUrl . '/';
                 }
-                $container = ContainerImpl::getInstance();
-                $controller = $container->getBean($controller);
+
+                if ($controllerUrl != $requestController) {
+                    continue;
+                }
+
+                if (!is_object($controller)) {
+                    if ($this->_loggerDebugEnabled) {
+                        $this->_logger->debug(
+                                'Found as annotated controller: ' . $controller
+                        );
+                    }
+                    $container = ContainerImpl::getInstance();
+                    $controller = $container->getBean($controller);
+                }
+                return array($controller, $requestAction . 'Action');
             }
-            return array($controller, $action . 'Action');
         }
         return false;
     }
@@ -175,10 +189,10 @@ class HttpUrlMapper implements IMapper
      *
      * @return void
      */
-    public function __construct()
-    {
+    public function __construct() {
         $this->_logger = \Logger::getLogger('Ding.MVC');
         $this->_map = array();
         $this->_loggerDebugEnabled = $this->_logger->isDebugEnabled();
     }
+
 }
\ No newline at end of file
